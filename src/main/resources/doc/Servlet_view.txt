
<1> 什么是Servlet？
	sun公司开发的用于扩展web浏览器功能的一种组件技术。
	该组件要求实现Servelet 接口，并且在符合Servelt 规范的 web服务器当中运行。

<2> 组件和容器：
    （如何通讯 socket；协议）http应用层协议
	===========================================
	| ## JCP组织：sun 创立的，统一了接口的规范。|
	===========================================
	(1) 什么是组件？
	按照特定规范开发的程序，该程序不用考虑一些基础服务（比如网络通讯问题、多线程、等等），
	只需要实现业务逻辑。
	特点：
		、必须依赖于容器才能运行。
		、必须符合规范。
	(2) 什么是容器？
		、也是一个按照特定规范开发的程序。实现了基础服务，并提供组件的运行环境。
		、容器接口要求各厂商一致
	(3) 组件 + 容器，这种编程模式的优点：
		A.简化编程：因为基础服务代码不用再写了（容器已经实现）。
		B.组件不依赖于特定的容器，可以在符合规范的任意一种容器上都能运行。
		C. tomcat开源的 Servlet容器，
			、实现了 web 服务器的的大部分功能。
    		、中小型的应用可以用 tomcat。

<3> tomcat
	、开源的servlet容器，它实现了web服务器的大部分功能。
	、中小型的应用可以用 tomcat。	
	
	、tomcat的安装。
		1)解压缩到主目录。
		2)配置环境变量
			、JAVA_HOME:			jdk安装的目录
			、CATALINA_HOME: 	tomcat安装的目录
		3)启动和关闭服务器
		启动：
			、cd CATALINA_HOME/bin
			、linux/unix: 	sh startup.sh
			、window: 		startup
			、检测是否启动成功：	http://localhost:8080
		关闭：
			、linux/unix: 	sh shutdown.sh
			、window: 		shutdown
-------------------------------------------
10/11/11
<1> 开发一个Servlet（步骤）：
	1 些一个java类，实现Servlet接口／继承HttpServlet类。
	2 编译（依赖Servlet相关的的jar包：servlet-api.jar）
	3 定义一个目录结构： 
		appanme（任意的一个名字）
		WEB-INF(必须是这个名字，包括大小写)
			classes(必须是这个名字,放 .class文件)
			lib（必须是这个名字，可选的；放servlet运jar文件， 即服务器没有该jar文件）
			web.xml(必须按规范来写)
		html 
	4 部署
		、将第三步的目录结构 copy to 服务器特定目录，
		、或者将第三步定义的目录结构使用jar命令打成一个.war包，再copy to服务器特定目录。
	5 启动服务器
	6 访问Servlet：http://ip:port/appname/servlet url
	
---------------------------------------------------------

<2> Servlet 是如何运行的；
	、浏览器发送请求到server，
	、server会将请求中的数据，打包成一个请求对象 
	、(HttpServletRequest接口的实现类的实例，
			该对象包含请求数据，方便Servlet获取请求数据)。
	、同时，还会创建一个响应对象(HttpServletResponse接口的实现类的实例)。
	、接下来 sever 会依据请求路径，查看web.xml文件，
	、找到要调用的Servlet。
	、创建该 Servlet 实例，并调用 service 方法。
	、Servlet 可以从请求对象中获取数据，并将执行结果通过响应对象进行输出。

-----------------------------------------------------------------------
<3> Http 协议：
	（1）什么是HTTP协议：
		、hypertext transport protocal超文本传输协议，
		、定义了浏览器与 web 服务器之间的数据传输过程 与 数据格式
		、w3c制订 的应用层协议
		、短连接 每次请求建立一次连接
	（2） 传输的过程：
		、step1 client 、 web server 建立 socket 连接
		、step2 client --> (req) --> web server
		、step3 web server --> (resp) --> client
		、step4 web server 关闭 socket 连接 
	（3）数据格式：
	
	\请求数据（请求数据包）：
		=============================================================================
		| GET /hello?name=nani HTTP/1.1
		| HOST: localhost:8080
		| User-Agent: Mozilla/5.0(Windows NT 5.1;rv:15.0) Gecko/20100101 Firefox/15.01
		| Accept: text/html,application/xhtml+xml,application/xml;q=0.9
		| Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3
		| Accept-Encoding: gzip,deflate
		| Connection: keep-alive
		=============================================================================
		A 请求行：
			、请求方式（get / post）
			、请求路径
			、协议的版本号（1.0 / 1.1）
		B 若干消息头
			、消息头：指浏览器与 服务器之间事先约定的一些通信的规则，由w3c定义。
			、（比如browser可以通过cookie消息头，向server发送cookie）。
		C实体内容：
			、post请求有实体内容，get内容跟在url后面
	
	\响应数据（响应数据包）：
		========================================
		| HTTP/1.1 200 OK
		| Server: Apache-Coyote/1.1
		| Content-type: text/html;charset=UTF-8
		| Content-Length: 140
		| Date: Fri, 28 Jun 2013 03:19:12 GMT
		========================================
		<html>...</html>
		A 状态行
			状态的版本号
			状态号 比如
					200，表示处理成功，
					500，表示处理失败。系统内部出错，即应用程序出错(servlet)
					404，要访问的资源不存在，找不到。
					405，找不到对应的方法
			状态码的描述
		B 若干消息头
			比如 web server 可以通过 set-cookie，向 browser
			发送 cookie。
		C 实体内容
			web server 处理之后的结果。
   
--------------------------------------------------------------------

<1>重定向：redirect
	sever 向 br 发送一个302状态码己一个地址(重定向地址)。br 会立即向这个地址发送新请求。

	（1）如何重定向：
		、response.sendRedirect(地址)：
		、<c:redirect url="">
	（2）特点：
    	A. 地址是任意的 (即可以跳转到任意的网页)；
    	B. br 地址栏会变成重定向的地址。

<2> server 如何处理请求地址：
	有这样一个地址 http://ip:port/appname/hello.html
	、server 首先会去掉appname(包含应用名)，
	、查找web.xml，依据 /hello.html 去做匹配<url-pattern>。
	、匹配规则：
		精确匹配：要求请求的地址与 url-pattern 完全一致，包括大小写
		模糊匹配：使用通配符 * ;
			比如：<url-pattern> /abc/*(*代表阿任意的字符串) 
				/abc/bb			// 对
				/abc/bb/dd		// 对
				/abcd			// 错
		后缀匹配：路径必须以" *. "开头 再加 任意字符串。
			比如： <url-pattern> *.do
				/adfad.do		// 对
				/adfad.doo		// 错
				/adfaddo		// 错
				
<3>中文问题：###########
	（1）对html文件应使用：
		<meta http-equiv="Content-type" content="text/html;charset=utf-8">
   		注意：确保html的编码与声明的一致；
		作用：模拟一个http消息头，告诉browser，以指定编码来显示该 html 文件。
	（2）对于一个Servlet
		A. request.setCharacterEncoding("UTF-8")；
		注意：要放到getParameter()前面。
		作用：告诉server，以指定的编码来解码HTTP请求的数据。
       B. response.setContentType("text/html;charset＝UTF-8");
		作用：
			、告诉server ，向流写些数据时，使用的编码方式。
			、生成一个消息头，告诉 browser 以指定的编码方式来显示数据。
	（3）对于数据库：
	mysql：
		指定数据库保存数据时的的编码方式；
		create database manutd default character set utf8;
	jdbc url，指定的驱动程序在取数据时，使用的编码。
		url = jdbc:mysql://127.0.0.1:3306/manutd:useUnicode=true&characterEncoding=utf8;
  
----------------------------------------
常用方法：
	request.getParameter();
	request.getRequestURI();        //获取请求地址
	response.sendRedirect(地址);    	//重定向
--------------------------------------------------------------------------pm

2、转发
	（1）什么是转发？
		、 一个servlet(jsp)将未完成的任务(一般指的是，servlet将处理之后的数据交jsp显示)
		 		交给另一个servlet(jsp)来处理。
		、在server内部，多个组 (servlet/jsp) 件共同完成一个任务
	（2）如何转发：
		RequestDispatcher rd = request.getRequestDispatcher(路径);
    	rd.forward(request,response); 	// 将request,response传给下一个组件
	（3）特点：
		A. 只能在同一个server内部进行转发
		B. 转发涉及到的多个组件可以共享request，response
		C. 浏览器地址栏的地址不会改变。

3、转发和重定向的区别:
	（0）基本使用：
		转发：
			requert.setAttribute("key" value);
			RequestDispatcher rd = request.getRequestDispatcher("/page/hello.jsp");
			rd.forward(request,response);
		重定向：response.sendRedirect("");
	（1）转发：	是在Web Server 内部(在同一个应用内部各个组件)之间进行跳转。
		重定向：	跳转的地址是任意的。       
	（2）转发：	此操作 browser 的地址栏不会有任何变化；
		重定向：	browser 的地址栏会变成重定向的地址。
	（3）转发：	一般用于：一个组件完成部分任务，然后将任务转交个另一个组件来完成，
				各个组件共享request，response。
		重定向：用于一个组件我完成了任务，然后，要求browser向新的组件发起新的请求。
		
--------------------------------------------------------------------------------

4、Servlet 的生命周期 和 核心的API
	（1）生命周期：
		含义：servlet容器如何去管理 Servlet，
		即如何创建Servlet实例，为其分配资源，并调用，然后释放资源，销毁起实例。
	=====================
	step1：创建servlet实例
		、1，容器在启动时，会检查<load-on-startup>, 如果某个servlet有该配置，创建其实例。
		、2， 当请求到达容器，容器检查要调用的 servlet 有没有对应的实例，
				有，使用，无，创建该实例。
		、在默认情况下，同一个 servlet 类，只会有一个 Servlet 实例。
				即一个Servlet实例，要为多个请求服务。
	============
	step2：初始化：
		、容器会调用servlet的init(ServletConfig config)方法为其分配资源。
		、如果Override该方法，最好Override init() 方法，（不带参数的那个）。
	==========
	step3：就绪
		、容器调用serlvet的service(request, response)
		、HttpServlet对该方法的默认实现;
			该方法默认情况下，会依据请求方式的不同（get/post），
			分别去调用doGet(Request, Response), doPost()方法。
			但是，HttpServlet没有对doGet,doPost做任何的实现，需要
			继承类去实现。
			我们开发的Servlet，可以选择：
				、方式一：override service()。
				、方式二：override doGet(), doPost()。
	==========
	step4：销毁：
		、容器有可能将一段时间不使用的servlet实例删除掉，
		、在删除(销毁)之前，会调用destroy()方法。
		、================================================================
		、\若需自定义初始化、销毁资源的代码，应该去覆盖 init、destroy()方法。\
		  ================================================================
		  
	<2> Servlet基础 API
		servlet 接口：
			// 定义了一个Servlet 需要实现的基础方法
			// 三个主要方法 init(), destroy(), service()；
		GenericServlet 抽象类：
			// 部分实现了Servlet接口（init, destroy）
		HttpServlet类： 
			// 继承了 GenericServlet（实现了service），
			// 开发一个Servlet ，最好继承 HttpServlet
		HttpServletRequest 接口：
			//继承了 ServletResquest;
			//由server来实现，并由server创建其实例。
			// String getParameter(param)：	依据参数命，获得参数
		HttpServletResponse 接口：
			// 继承了 ServletResponse；
			// PrintWriter getWriter():	返回一个输出流，用于输出servlet执行的结果。
		
	（3）Servlet核心API
		Servlet接口
			init(ServletConfig config):
				// 被容器调用，容器创建ServletCnofig实例，
				// 然后作为参数传递给 init方法。
				// ServletConfig实例可以访问servlet的初始化参数。
				// ===========================================
				// 该参数在web.xml中，使用<init-param>来配置的。
				// ===========================================
	    	destroy();
				// 容器销毁 servlet 实例之前调用方法，用于释放资源。
	    	service(ServletRequest request, ServletReqponse response);
				// 完成实际的请求。

--------------------------------------------------------------------------------pm
		
3、路径问题
	（1）路径问题涉及到四种情况，在以下情况，需要考虑地址该怎么写
		A. 链接
		B. 表单提交
		C. 重定向
		D. 转发
		========================================
		A、B、C ：	// 从应用名开始，包含应用名
		D ：			// 从应用名之后开始
		========================================
	（2）相对路径：
 	（3）绝对路径：	 / 开头的路径

4、DAO： Data Acess Object
	封装了数据访问逻辑，调用者通过 interface 调用其方法，
	这样做的目的：当底层的 数据访问逻辑发生改变，不会涉及到调用者。
	
	（1）DAO 的组成：
		A. entity : 
			、dao操作的数据，比如 order，一般来说，数据库有entity对应的表（t_order）。
		B. dao接口：
			、声明对数据的操作。这些方法应该是与具体的实现技术无关的。
			、OrderDAO：
			、public void save (Order order)throws SQLException;
			、SQLException 是与 JDBC 技术相关的，限制了实现者必须使用 JDBC 来实现该接口。
			、=========================================================
			、最好这样写：public void save(Order order)throws Exception;
			、=========================================================
		C. dao实现：
			采用具体的技术【hibernate\myBatis\JDBC】来实现接口中声明的方法。
		D. dao工厂：
			DAOFactory.getInstance();	// 返回DAO实例。
			OrderDAO dao = DAOFactory.getInstance(OrderDAO.class);
			dao.save(order);
			调用者通过工厂获得 DAO 实例，不依赖于特定的 DAO 实例。

-------------------------2010/11/17-------------------------------am
复习：
① : get 和 post ：(都是 browser 向 server 发送数据 )。
		get：将请求的 数据 放到 请求行 ，适合发送 少量 数据 到 Server。
			（地址？id=17）能够在地址栏清楚的看到发送的数据，
			不安全。
		post：将请求的 数据 放到 实体 里 ， 适合发送 大量数据；
			发送 数据 在 地址栏 看不到，相对 get 安全。
		get 和 post 都不会对发送的 数据 加密。
			在 银行 等部门 都要求对传送的 数据 加密。
			post适合表单提交。
			（表单提交的默认方式get）。

②：配置文件的编写：
	Tomcat实现了自己的 ClassLoader;
	搜搜路径：WEB-INF的calss文件夹下：
	ClassLoader cl = String.class.getClassLoader(); 
	InputStream ips = cl.getResourceAsStream("dao.properties");
	Properties prop = new Properties();
	props.load(ips);
	
------------------------------------------------------------
①：Http 状态管理：
	、Http 协议的无连接性 - client 和 server 通信完成后， socket就close了
	、Http 是一种无状态协议，即每发送一次请求，建立一次连接，
	、server 并不会记录谁访问过它，这样做是为了提高 Server的工作效率。
			连接会释放，可以为更多的客户服务
			
	（1）目的：某些特定的场合，需要记录 来访者（eg：购物）。
	（2）怎样进行状态管理
		A. 客户端 状态管理 Cookie
		B. Server端 状态管理 Session
		
	=========================================
	1、Server可以向client写东西，只能是文本，
	2、client可以阻止server写入。
	3、Server只能拿自己webapp写入的东西
	4、每个browser都有自己独一无二的编号
	==========================================

----------------------------------------------------------------------------

②：Cookie技术：（小甜饼）
	（1）什么是Cookie？
		、在客户端（browser）保存用户状态的一种状态管理技术。
		、当 br访问 Server 时 ，S 可以将 少量的 数据发送 给 客户端，
			客户端会将该数据保存到 内存 或 硬盘上；
			当 br 再次访问 S 时，会将 该数据发送给 S。
			这样 br 和 S 多次交互，该数据 会一直来回传递，
			通过这种方式来维护用户的状态。
		、br 和 server 都是通过 消息头 传递 cookie 的。

	（2）Cookie 的使用：
		A. 创建 cookie ：使用 java 类 cookie
			Cookie cookie = new Cookie(String name ,Strnig value);
			response.addCookie(cookie);
			cookie 的值 只能用 AscII 编码(解决中文问题)；

		B. 怎样查询 Cookie：
			Cookie[] cokkies = request.getCokkies();	// 如果 br 没有任何Cookie返回 null。
			String Cookie.getName( );
			String Cookie.getValue( );

		C. cookie 的生存时间：
			默认情况下，cookie 会保存在内存中 ( 指的是 OS 为 Browser 分配的内存空间)。
			如果 browser 关闭，内存会被 OS 回收，cokkie就不存在了。
			===================================================
			设置 cookie 的生存时间：
			Cookie.setMaxAge(int seconds);
			seconds < 0 ：默认情况，相当于保存在 内存 中。
			seconds > 0 ：会将 cookie 以 文件 的 形式保存到 硬盘 上。
			seconds = 0 ：删除 cookie；
			====================================================
			
		D. Cookie 的路径问题： 默认保存在 cookie 组件 的路径
			br 向 Server 的某个组件发送请求时，会比较cookie的路径 与 要访问的路径。
			如果要访问的路径是 cookie 的路径 或 其子路径，则发送 cookie。
			、比如：Cookie.setPath("/web") ：将 cookie 的保存在 web，
			、要访问的组件：ip:port/web/abc ok!

	（3）FireFox打开多个窗口 OS 只为他们分配一个内存空间。
		其他 Browser 每打开一个窗口， OS 就会分配一个新的内存空间。

③ Cookie 的使用场合：
	A. 保存 用户 的 使用习惯 或 用户 的 上次的操作 结果；
	B. 自动登录（记住用户的 登录 状态）；
	C. 淘宝中，在 Cookie 中保存 用户 浏览的商品的 id

④ Cookie 的限制：
	A. 只能保存 字符串（只能是 ASCII，非 ASCII 字符要编码）；
	B. 保存的 数据量 大小有限制(跟 Browser 有关，大约4K)；
	C. 数据 保存 在 客户端 ， 不安全；
	D. Browser 可以禁止 Cookie；
	E. Browser 保存的 Cookie 数量 有限制；

⑤ Cookie 的 中文 问题：
	cookie 值，不可随便写，因为是通过 HTTP 头协议进行传送的。
	解决：手工的进行编码，写的时候编码，取的时候要进行解码。

	java.net 类 URLEncoder 将 URL 编码
	java.net 类 URLDecoder 将 URL 解码

	A. Cookie 的编码：
	String name = "username" ;
	String temp = "弗格森" ;
	String value = URLEncoder.encode( temp ,"UTF-8");
	Cookie cookie = new Cookie(username , value);

	B. Cookie 的解码：
	String temp = cookie.getValue() ;
	String value = URLDecoder.decode(temp , "UTF-8");


---------------------------2010/11/18----------------------------am

1、：session 技术：
	(1)什么是session
		server 端维护用户状态的一种状态管理技术。
		br 访问 server，server会创建一个session 对象（该对象有一个唯一标识号 sessionId）。
		并且，服务器默认情况下，会使用cookie技术，将sessionId发送给浏览器来保存。
		这样，当浏览器下次访问时，会将sessionId发送给服务器，
		服务器会通过sessionId查找到对应的session对象。
		通过这种方式，就可以保存用户多次操作的中间结果，也就是状态。
		=============================================
		可以将session理解为session对象。
		可以将session理解为 br 与 server 的多次交互。
		=============================================
	(2)session的使用
		A.创建session
			、HttpSession session = request.getSession();
			、HttpSession session = request.getSession(boolean flag);
				flag ： true;（常用）
				当flag为true:
					浏览器发送请求，服务器会检查请求中是否存在sessionId,
					若无，服务器会创建一个session对象；
					若有，还要检查该sessionId对应的session对象是否存在，
					若存在，就返回，
					若不存在，创建新的session对象。
				当flag为false:
					浏览器发送请求，服务器会检查请求中是否存在sessionId,
					若无，返回null；
					若有，还要检查该sessionId对应的session对象是否存在，
					若存在，就返回，
					若不存在，返回null。

	B.session 的常用方法：
		session.getId(); 							// 返回session的id。
		session.setAttribute(String key, Object value)	// 将value绑定到session上。
				// Object 要求实现 Serializable 接口。
				// 服务器有可能将session对象的状态临时写入到持久化设备（比如文件），
				// 写入的方式是采用序列化的方式。
		Object session.getAttribute(String key);	// 若key对应的value不存在，返回null。
		session.removeAttribute(String key)			// remove
		
	C.session失效
		一：Session.setMaxInactiveInterval(int seconds); // 最大失效时间
		二：可以使用配置文件，来设置
	D. 立即使session失效
		、Session.invalidate();		
		、Session.setMaxInactiveInterval(0); 	// 设置最大不活动时间。
	
	============================	
	统计当前用户是第几次访问系统。
	=============================
	
	(3) 案例：
		session验证
			登录成功，向session里写入特定数据。
			然后，在需要保护的页面，添加代码，取数据，
			若取不到，则说明用户没有登录。
		验证码
			生成验证码:
				使用servlet来生成一张图片，发送给浏览器。
				servlet可以使用java.awt.*中的类来生成图片。
				还要注意：
				========================================
				response.setContentType("image/jpeg");
				response.getOutputStream();
				=========================================			
			使用验证码:
				在生成验证码之后，将该验证码写入session，
				然后，再将该验证码显示给用户。
				用户输入的验证码与session中的验证码去比较，若
				不同，则提示用户，并显示新的验证码。		

---------------------------2010/11/19-----------------------am

server ， 默认情况下，通过 cookie 向browser 发送sessionId；
browser 可以禁止 cookie；
server 可以检查到 browser 是否支持 cookie。

①：browser 禁止 cookie 后，如何实现 session 机制：（即 如何实现 sessionId 的跟踪）：
------------------------------------------------------------
若browser支持cookie，创建session时，将sessionId存入cokkie
若不支持，必须使用URL重写来实现session
	1、转码
	2、URL后面加入SessionId
	对于所有的链接、表单提交，添加
		response.encodeURL("地址");
	对于重定向
		response.encodeRedirectURL("地址");
	转发：不用管（因为在server内部进行）
	
------------------------------------------------------------
	（1）URL 重写机制：
		如果访问需要session支持的web组件(jsp 或 servlet)，
		不能够在地址栏直接输入地址，应该使用 server 生成的 url 地址
		(server在生成的地址后面添加了sessionId)。
		当 browser 向 server 发请求时，会将 sessionId 传递给 server ，
		通过这种方式，来实现sessionId 的跟踪。
	
	
②：session 与 cookie 的 比较：
	(1)session
		可以保存任意的数据
		保存在服务器端，相对安全
		所有数据都在服务器端，服务器压力相对会大一些。
		在浏览器禁止cookie以后，可以使用url重写技术。
	(2)cookie
		只能是字符串
		保存在客户端，相对不安全
		状态数据放在客户端，分担服务器的压力。
		cookie可以禁止。


－－－－－－－－－－－－－－－－－－－－－－－－－－－
 3、过滤器
	（1）什么是 过滤器：
		servlet 规范中定义 的 一种类， 可以对 容器 的调用过程进行 拦截。
		也就是说，过滤器可以在servlet处理的前后，添加一些相应的处理。
			常见的处理：
			比如编码、安全控制、权限控制 等
	（2）过滤器 的编程
		step1: 写一个 java 类，实现 Filter 接口；
		step1: 要将处理的代码 写在 doFilter 方法中；
		step1: 配置（web.xml）;
	（3） 过滤器 的 优点
		A. 实现代码的可“插拔性”。增加或者减少某个模块，不会影响整个程序。
		B. 可以将通用的功能集中在 过滤器 中实现，方便代码的维护。
	（4） 过滤器 的 优先级：
		web.xml 中配置在前面的 优先级 高。

--------------------------------------------------------------------------------
4、监听器
	（1）什么是监听器：
		、servlet 规范定义的一种类。
	
	（2）监听器 编程：
		step1：写java 类，实现对应的 监听器 接口.
			(比如，要对session 的创建和销毁时间作处理，要实现HttpSessionListener)
		step2：将事件处理代码写在相应的监听方法里
		step3：配置(web.xml)
	
	（3）
		事件源		发生事件的对象
		监听器		监听事件源上发生的事件
		事件对象		每发生一个事件都会产生一个事件对象，事件对象中封装了事件源
	 
	================================================================
	监听 ServletContext, HttpSession, ServletRequest的创建 与 销毁
		\ServletContextListener
		\HttpSessionListener
		\ServletRequestListener
	=================================================================
	监听 ServletContext, HttpSession, ServletRequest 中数据变化的监听器
		\ServletContextAttributeListener
		\HttpSessionAttributeListener
		\ServletRequestAttributeListener
	==================================================================
	感知型监听器 - 不需要注册
		\HttpSessionBuddingListener		// 感知自己何时被绑定到 HttpSession域中 
		\HttpSessionActivationListener 	// 感知自己何时随着HttpSession钝化激活
		
------------------------------------------------------------------------------------

案例： 统计在线人数。
	ServletContext 接口：
	Servlet 上下文，server 启动时，
	会为每一个已经部署的应用创建一个唯一对象（实现了ServletContext接口的类的）。
	该对象会一直存在，除非server关闭，或 应用卸载。
	可以通过该对象。调用 server 的一些 功能。

	作用：
	==================================================================
		设置全局可用的数据：
		、ServletContext.setAttribute(String key,Object object);
		、Object getAttribute(String key); 找不到 返回null
		设置全局的初始化参数：
		即可以在web.xml 中，使用<context-param>配置的参数
	===================================================================
	如何创建该对象：
		================================================================
		ServletContext = GenericServlet.getServletContext();(可以直接用)
		ServletContext = HttpSession.getServletContext();
		ServletContext = servletConfig.getServletContext();
		================================================================

HttpSessionActivationListener
《Servlet核心编程》-张孝祥——servlet 的 流问题

-----------------------2010/11/23--------------------------------------am

①：如何上传文件：
	step1: 设置表单<form action="" method="post" enctype="multipart/form-data">
		1、method="post"
		2、enctype="multipart/form-data"
			enctype作用：
			browser 不再对表单的数据进行编码，以 二进制流 直接发送给 server。
			此时 server不能够直接使用request.getParameter( )来获得表 数据；
			而要使用InputStream ips = request.getInputStream(); 
			然后再 分析这个 二进制 流。
			##<!-效率高，如果编码效率将降低->
		3、<input type="file"> 输入域
		4、不建议，不适合特别大的文件上传
	step2: 在 server 端，一般使用 工具 来分析 二进制流。
		比如：apache-fileupload ##<-!www.apache.org->
		需要添加相应的 jar 包 
			commons-fileupload-1.2.1.jar 	:文件上传要使用的包 但依赖于
			commons-io-1.4.jar  			##<-apache针对 jdk(java.io) 的增强 版本 ->
---------------------------------------------------
将文件保存在 WEB-INF下，比较安全

上传文件，中文乱码问题
	1、文件名
		req.setCharacterEncoding("UTF-8");
	2、普通字段
		FileItem.getString("UTF-8");
上传文件分目录存储问题：
	1、分用户名用户存储，
	2、按日期分目录存储 	// 采用较多
	3、按filename的 hashcode 计算文件路径
重名问题：
	名字 + UUID
限制上传类型
	
	

----------------------------------------------------

②：servlet 的 线程安全 问题：
	产生原因：
（1）：在默认情况下，一个servlet实例，有可能同时被多个线程访问。
	（一个servlet类，在 server 内部，只有一个实例）。
	while(true){
		Socket s = ServerSocket.accept( );
		new WorkThread(s).start( );
	}
	WorkThread extends Thread{
		run(){
			//processe socket ...
			//调用 servlet
		}
	}
（2）：如果要对servlet 的属性进行修改操作。（多个线程同时修改
	servlet的同一属性），有可能产生 线程安全 问题。

	解决方法：
（1）：使用 synchronized 加锁。
（2）：让一个 Servlet 实现一个SingleThreadModel 接口(标识接口)。
	server 会对每一个 线程， 创建一个servlet实例。
	##<-!  不建议使用，耗资源，server内存占用过大 ->
（3）：##<-!建议使用-> 在 servlet 类中，不要对 属性 进行 修改。


--------------------------Servlet小结：-------------------------------

①：servlet 基础：
	1、什么是 servlet
	2、什么是 servlet 容器
	3、servlet 的优点：
		A. 容器无关性；既可以在任意符合容器规范的容器都能运行； 
		B. 是jvaa类；可以做任意 java 类 能做的事。
	4、如何开发一个 servlet
	5、servlet 如何运行
	6、了解 Http 协议（Http、请求数据包、响应数据包的结构）

②：servlet核心：
	1、servlet 的 核心类 与 接口
		HttpServletRequest 
			String  getParameter
			String[ ]  getParameterValues("")用于多个相同的参数名
			setAttribute(key , value);
			Object  getAttribute(key)
			removeAttribute(key)
			setCharacterEncoding("UTF-8")
			String  getRequestURI()
			String  getRemoteHost()
			getRequestDispatcher("") //转发
			HttpSession  getSession()
			String  getContentpath()
			InputStream  getInputStream()
			Cookie[ ]  request.getCookie(); 
		HttpServletResponse
			PrintWriter  getWriter()
			OutputStream getOutputStream()
			setContentType("")
			addCookie(Cookie)
			sendRedirecter("index.jsp")
			encodeURL()
			encodeRedirectURL()
		ServletConfig
		ServletContext
			getRealPath("")
		HttpSession
	2、servlet 的 生命周期
	3、get / post 请求d 的区别
	4、转发 与 重定向(概念、编程、区别
	5、表单处理(如何获得请求参数、编码问题)
③：状态管理：
	1、htrtp 协议的武装天特性
	2、cookie技术(概念、编程、限制)
	3、session技术(概念、编程、优点、与cokkie的区别)
	4、案例（验证码、session验证、购物车）
④：数据访问：
	1、将 数据访问逻辑 封装到 DAO(原因、编程)
	2、使用server提供的 数据源 （在server 上配置一个 数据源 ，然后
		程序 使用 该数据源 访问 DB）
⑤：过滤器 与 监听器：
	1、概念 及 基本 编程
	2、过滤器 的 优点、优先级
		可插拔性
		代码易维护
⑥：其他（文件上传、路径、中文编码、异常处理、线程安全）：